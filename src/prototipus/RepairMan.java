package prototipus;

import java.util.List;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : RepairMan.java
//  @ Date : 4/22/2023
//  @ Author : 
//
//

public class RepairMan extends Player implements Updateable{
	private boolean hasPump;
	private Pipe pipeInHand;
	
	public RepairMan(Component position) {
		host = position;
		position.addPlayer(this);
	}
	
	private void obtainNewPipe() {
		if(pipeInHand == null) {
			Pipe newPipe = new Pipe();
			pipeInHand = newPipe;
			Map.addPipe(newPipe);
		}
	}
	
	private void detachPipeFromNode(Pipe pipe) {
		List<Component> pipeEnds = pipe.getNeighbours();
		Component end1 = pipeEnds.get(0);
		Component end2 = pipeEnds.get(1);
		pipe.removeNeighbour(end1);
		pipe.removeNeighbour(end2);
		
		end1.removeNeighbour(pipe);
		end2.removeNeighbour(pipe);
		pipe.setLeaks(true);
		
		pipeInHand = pipe;
	}
	
	public void repair() {
		host.repaired();
	}
	
	public void pickUpPipe(Pipe pipe) {
		boolean isHostNode = host.getNode();
		boolean isHostItemSource = host.getItemSource();
		if(isHostNode && !isHostItemSource)
			detachPipeFromNode(pipe);
		else if(isHostNode && isHostItemSource)
			obtainNewPipe();
	}
	
	public void pickUpPump() {
		boolean standingOnItemSource = host.getItemSource();
		if(standingOnItemSource) {
			hasPump = true;
		}
	}
	
	public void placeDownPump() {
		if(hasPump) {
			boolean isPumpPlaceableOnHost = host.getPumpPlaceable();
			if(isPumpPlaceableOnHost) {
				List<Component> hostNeighbours = host.getNeighbours();
				Pump newPump = new Pump();
				newPump.addNeighbour(host);
				Component otherEndPump = hostNeighbours.get(0);
				host.removeNeighbour(otherEndPump);
				host.addNeighbour(newPump);
				Pipe newPipe = new Pipe();
				otherEndPump.removeNeighbour(host);
				otherEndPump.addNeighbour(newPipe);
				newPipe.addNeighbour(otherEndPump);
				newPipe.addNeighbour(newPump);
				newPump.addNeighbour(newPipe);
				//PrototypeTest.addPump(newPump);
				//PrototypeTest.addPipe(newPipe);
				Map.addPump(this, newPump);
				Map.addPipe(newPipe);
				hasPump = false;
			}
		}
	}
	
	public void placeDownPipe() {
		boolean standingOnNode = host.getNode();
		if(pipeInHand == null) return;
		if(standingOnNode) {
			//ellenőrzi hogy ciszternán állunk-e
			//ellenőrzi hogy ciszternára akarjuk-e lerakni
			//ha mindkettő igaz, nem engedi
			if (host.itemSource && pipeInHand.countNeighbours() == 1 && pipeInHand.getNeighbour(0).itemSource) {
				return;
			}
			//mint ciszternánál, csak forrásra ellenőriz
			if(host.capacity == -1 && !host.itemSource){
				if(pipeInHand.countNeighbours() == 1 && !pipeInHand.getNeighbour(0).itemSource && pipeInHand.getNeighbour(0).capacity ==-1){
					return;
				}
			}
			host.addNeighbour(pipeInHand);
			pipeInHand.addNeighbour(host);
		}
		int nrOfNeighboursOfPipeInHand = pipeInHand.countNeighbours();
		if(nrOfNeighboursOfPipeInHand == 2) {
			pipeInHand.setLeaks(false);
			setPipeInHand(null);
		}
	}
	public void makeSlippery(){}
	public void setPipeInHand(Pipe pipe) {
		pipeInHand = pipe;
	}
	
	public Pipe getPipeInHand() {
		return pipeInHand;
	}
	
	/*public String toString() {
		return super.toString() + ", hasPump: " + hasPump + ", pipeInHand: "
	+ PrototypeTest.getComponentTypeAndIndex(pipeInHand);
	}*/
}
