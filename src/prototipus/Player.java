package prototipus;


import java.util.ArrayList;
import java.util.List;
import java.util.Random;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Player.java
//  @ Date : 4/22/2023
//  @ Author : 
//
//




public abstract class Player implements Updateable{
	protected int stuckCounter;
	public final int stuckTime = 10;
	protected Component host;

	//absztrakt függvények

	public abstract void repair();
	public abstract void pickUpPipe(Pipe pipe);
	public abstract void pickUpPump();
	public abstract void placeDownPump();
	public abstract void placeDownPipe();


	public abstract void makeSlippery();
	private void slips() {
		ArrayList<Component> neighboursOfHostPipe = host.getNeighbours();
		Random random = new Random();
		int seged = random.nextInt(0, 2);
		host.slipperyCounter=0;
		if(neighboursOfHostPipe.size() >= seged)
			setNewHost(neighboursOfHostPipe.get(0));
		else setNewHost(neighboursOfHostPipe.get(seged));
	}

	
	public void moveTo(Component dest) {
		if(stuckCounter > 0)
			return;
		
		boolean destCanBeSteppedOn = dest.canBeSteppedOn();
		int destStickyUntil = dest.getStickyCounter();
		int destSlipperyUntil = dest.getSlipperyCounter();
		
		if(destCanBeSteppedOn) {
			if(destSlipperyUntil > 0) {
				setNewHost(dest);
				slips();
				return;
			}
			if(destStickyUntil > 0) {
				stuckCounter = stuckTime;
			}
			setNewHost(dest);
		}
	}
	
	public void changePumpInput(Component input) {
		if(host.getNode() && host.capacity > 0)
			host.setInput(input);
	}
	
	public void changePumpOutput(Component output) {
		if(host.getNode() && host.capacity > 0)
			host.setOutput(output);
	}
	
	public void sabotage() {
		host.punctured();
	}
	
	public void makeSticky() {
		boolean isHostNode = host.getNode();
		if(!isHostNode && host.slipperyCounter == 0) {
			host.resetStickyCounter();
		}
	}
	
	public void setNewHost(Component dest) {
		host.removePlayer(this);
		dest.addPlayer(this);
		host = dest;
	}
	
	public void updateStatus() {
		decreaseStuckCounter();
	}
	
	public String toString() {
		return "stuckCounter: " + stuckCounter;
	}
	
	public Component getHost() {
		return host;
	}
	
	public void decreaseStuckCounter() {
		if(stuckCounter > 0)
			stuckCounter --;
	}
}
